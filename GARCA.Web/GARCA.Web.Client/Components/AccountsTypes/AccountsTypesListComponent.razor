@page "/AccountsTypes"
@rendermode InteractiveAuto
@inject IJSRuntime JsRuntime

<div class="card">
    <div class="card-header">
        <div class="row">
            <div class="col-7">
                <h4 class="card-title text-dark">Tipos de Cuentas</h4>
            </div>
            <div class="col-3 offset-2">
               <NavLink href="Create_AccountType" class="btn btn-primary"><i class="bi bi-plus-circle-fill"></i>&nbsp; Nuevo tipo </NavLink>
            </div>
        </div>
    </div>
    <div class="card-body">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>#</th>
                    <th>Descripción</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody>
                @if (lObj.Count() > 0)
                {
                    @foreach (var obj in lObj)
                    {
                        <tr>
                            <td>@obj.Id</td>
                            <td>@obj.Description</td>
                            <td>
                                <NavLink href="@($"Update_AccountType/{@obj.Id}")" class="btn btn-success"><i class="bi bi-gear-fill"></i>&nbsp; Editar</NavLink>
                                <button @onclick="@(() => OnDelete(obj.Id))" class="btn btn-danger"><i class="bi bi-trash-fill"></i>&nbsp; Borrar </button>
                            </td>
                        </tr>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="3"> Cargando...</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<ConfirmDelete ProcessingParentComponent="IsProcessing" ChangeConfirm="Confirm_Delete_OnClick"></ConfirmDelete>


@code {
    private IEnumerable<AccountsTypes> lObj { get; set; } = new List<AccountsTypes>();
    private bool IsProcessing { get; set; } = false;
    private int? DeleteIdObj { get; set; } = null;


    protected override async Task OnInitializedAsync()
    {
        lObj = await new RepositoryBase().GetAll();
    }

    public async Task OnDelete(int id)
    {
        DeleteIdObj = id;
        await JsRuntime.InvokeVoidAsync("ShowModalConfirmDelete");
    }

    public async Task Confirm_Delete_OnClick(bool confirmado)
    {
        IsProcessing = true;
        if (confirmado && DeleteIdObj != null)
        {
            await new RepositoryBase().Delete(DeleteIdObj.Value);
            await JsRuntime.ToastrSuccess("Tipo cuenta borrada correctamente");
            lObj = await new RepositoryBase().GetAll();
        }

        await JsRuntime.InvokeVoidAsync("HideModalConfirmDelete");
        IsProcessing = false;
    }
}
