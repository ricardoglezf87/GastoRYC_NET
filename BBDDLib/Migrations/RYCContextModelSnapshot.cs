// <auto-generated />
using System;
using BBDDLib.Manager;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace BBDDLib.Migrations
{
    [DbContext(typeof(RYCContext))]
    partial class RYCContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.10");

            modelBuilder.Entity("BBDDLib.Models.Accounts", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("accountsTypesid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("categoryid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("accountsTypesid");

                    b.HasIndex("categoryid")
                        .IsUnique();

                    b.ToTable("accounts");
                });

            modelBuilder.Entity("BBDDLib.Models.AccountsTypes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("accountsTypes");
                });

            modelBuilder.Entity("BBDDLib.Models.Categories", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("categoriesTypesid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.HasIndex("categoriesTypesid");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("BBDDLib.Models.CategoriesTypes", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("categoriesTypes");
                });

            modelBuilder.Entity("BBDDLib.Models.Persons", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("persons");
                });

            modelBuilder.Entity("BBDDLib.Models.Tags", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("BBDDLib.Models.Transactions", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("accountid")
                        .HasColumnType("INTEGER");

                    b.Property<decimal?>("amountIn")
                        .HasColumnType("TEXT");

                    b.Property<decimal?>("amountOut")
                        .HasColumnType("TEXT");

                    b.Property<int?>("categoryid")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("date")
                        .HasColumnType("TEXT");

                    b.Property<string>("memo")
                        .HasColumnType("TEXT");

                    b.Property<int?>("personid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("tagid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("transactionStatusid")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("transactionid")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("accountid");

                    b.HasIndex("categoryid");

                    b.HasIndex("personid");

                    b.HasIndex("tagid");

                    b.HasIndex("transactionStatusid");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("BBDDLib.Models.TransactionsStatus", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.HasKey("id");

                    b.ToTable("transactionsStatus");
                });

            modelBuilder.Entity("BBDDLib.Models.Accounts", b =>
                {
                    b.HasOne("BBDDLib.Models.AccountsTypes", "accountsTypes")
                        .WithMany("accounts")
                        .HasForeignKey("accountsTypesid");

                    b.HasOne("BBDDLib.Models.Categories", "category")
                        .WithOne("accounts")
                        .HasForeignKey("BBDDLib.Models.Accounts", "categoryid");

                    b.Navigation("accountsTypes");

                    b.Navigation("category");
                });

            modelBuilder.Entity("BBDDLib.Models.Categories", b =>
                {
                    b.HasOne("BBDDLib.Models.CategoriesTypes", "categoriesTypes")
                        .WithMany("categories")
                        .HasForeignKey("categoriesTypesid");

                    b.Navigation("categoriesTypes");
                });

            modelBuilder.Entity("BBDDLib.Models.Transactions", b =>
                {
                    b.HasOne("BBDDLib.Models.Accounts", "account")
                        .WithMany()
                        .HasForeignKey("accountid");

                    b.HasOne("BBDDLib.Models.Categories", "category")
                        .WithMany()
                        .HasForeignKey("categoryid");

                    b.HasOne("BBDDLib.Models.Persons", "person")
                        .WithMany()
                        .HasForeignKey("personid");

                    b.HasOne("BBDDLib.Models.Tags", "tag")
                        .WithMany()
                        .HasForeignKey("tagid");

                    b.HasOne("BBDDLib.Models.TransactionsStatus", "transactionStatus")
                        .WithMany()
                        .HasForeignKey("transactionStatusid");

                    b.Navigation("account");

                    b.Navigation("category");

                    b.Navigation("person");

                    b.Navigation("tag");

                    b.Navigation("transactionStatus");
                });

            modelBuilder.Entity("BBDDLib.Models.AccountsTypes", b =>
                {
                    b.Navigation("accounts");
                });

            modelBuilder.Entity("BBDDLib.Models.Categories", b =>
                {
                    b.Navigation("accounts");
                });

            modelBuilder.Entity("BBDDLib.Models.CategoriesTypes", b =>
                {
                    b.Navigation("categories");
                });
#pragma warning restore 612, 618
        }
    }
}
